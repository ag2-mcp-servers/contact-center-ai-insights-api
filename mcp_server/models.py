# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:33:34+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class GoogleCloudContactcenterinsightsV1AnnotationBoundary(BaseModel):
    transcriptIndex: Optional[int] = Field(
        None,
        description='The index in the sequence of transcribed pieces of the conversation where the boundary is located. This index starts at zero.',
    )
    wordIndex: Optional[int] = Field(
        None,
        description='The word index of this boundary with respect to the first word in the transcript piece. This index starts at zero.',
    )


class GoogleCloudContactcenterinsightsV1AnnotatorSelector(BaseModel):
    issueModels: Optional[List[str]] = Field(
        None,
        description='The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.',
    )
    phraseMatchers: Optional[List[str]] = Field(
        None,
        description='The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}',
    )
    runEntityAnnotator: Optional[bool] = Field(
        None, description='Whether to run the entity annotator.'
    )
    runIntentAnnotator: Optional[bool] = Field(
        None, description='Whether to run the intent annotator.'
    )
    runInterruptionAnnotator: Optional[bool] = Field(
        None, description='Whether to run the interruption annotator.'
    )
    runIssueModelAnnotator: Optional[bool] = Field(
        None,
        description='Whether to run the issue model annotator. A model should have already been deployed for this to take effect.',
    )
    runPhraseMatcherAnnotator: Optional[bool] = Field(
        None, description='Whether to run the active phrase matcher annotator(s).'
    )
    runSentimentAnnotator: Optional[bool] = Field(
        None, description='Whether to run the sentiment annotator.'
    )
    runSilenceAnnotator: Optional[bool] = Field(
        None, description='Whether to run the silence annotator.'
    )


class CorrectnessLevel(Enum):
    CORRECTNESS_LEVEL_UNSPECIFIED = 'CORRECTNESS_LEVEL_UNSPECIFIED'
    NOT_CORRECT = 'NOT_CORRECT'
    PARTIALLY_CORRECT = 'PARTIALLY_CORRECT'
    FULLY_CORRECT = 'FULLY_CORRECT'


class GoogleCloudContactcenterinsightsV1AnswerFeedback(BaseModel):
    clicked: Optional[bool] = Field(
        None,
        description='Indicates whether an answer or item was clicked by the human agent.',
    )
    correctnessLevel: Optional[CorrectnessLevel] = Field(
        None, description='The correctness level of an answer.'
    )
    displayed: Optional[bool] = Field(
        None,
        description='Indicates whether an answer or item was displayed to the human agent in the agent desktop UI.',
    )


class GoogleCloudContactcenterinsightsV1ArticleSuggestionData(BaseModel):
    confidenceScore: Optional[float] = Field(
        None,
        description="The system's confidence score that this article is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Map that contains metadata about the Article Suggestion and the document that it originates from.',
    )
    queryRecord: Optional[str] = Field(
        None,
        description='The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}',
    )
    source: Optional[str] = Field(
        None,
        description='The knowledge document that this answer was extracted from. Format: projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}',
    )
    title: Optional[str] = Field(None, description='Article title.')
    uri: Optional[str] = Field(None, description='Article URI.')


class GoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest(BaseModel):
    analysisPercentage: Optional[float] = Field(
        None,
        description='Required. Percentage of selected conversation to analyze, between [0, 100].',
    )
    annotatorSelector: Optional[GoogleCloudContactcenterinsightsV1AnnotatorSelector] = (
        Field(
            None,
            description='To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.',
        )
    )
    filter: Optional[str] = Field(
        None,
        description='Required. Filter used to select the subset of conversations to analyze.',
    )
    parent: Optional[str] = Field(
        None, description='Required. The parent resource to create analyses in.'
    )


class GoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsResponse(BaseModel):
    failedAnalysisCount: Optional[int] = Field(
        None, description='Count of failed analyses.'
    )
    successfulAnalysisCount: Optional[int] = Field(
        None, description='Count of successful analyses.'
    )


class GoogleCloudContactcenterinsightsV1CalculateStatsResponseTimeSeriesInterval(
    BaseModel
):
    conversationCount: Optional[int] = Field(
        None, description='The number of conversations created in this interval.'
    )
    startTime: Optional[str] = Field(
        None, description='The start time of this interval.'
    )


class Medium(Enum):
    MEDIUM_UNSPECIFIED = 'MEDIUM_UNSPECIFIED'
    PHONE_CALL = 'PHONE_CALL'
    CHAT = 'CHAT'


class GoogleCloudContactcenterinsightsV1ConversationCallMetadata(BaseModel):
    agentChannel: Optional[int] = Field(
        None, description='The audio channel that contains the agent.'
    )
    customerChannel: Optional[int] = Field(
        None, description='The audio channel that contains the customer.'
    )


class Role(Enum):
    ROLE_UNSPECIFIED = 'ROLE_UNSPECIFIED'
    HUMAN_AGENT = 'HUMAN_AGENT'
    AUTOMATED_AGENT = 'AUTOMATED_AGENT'
    END_USER = 'END_USER'
    ANY_AGENT = 'ANY_AGENT'


class GoogleCloudContactcenterinsightsV1ConversationParticipant(BaseModel):
    dialogflowParticipant: Optional[str] = Field(
        None,
        description='Deprecated. Use `dialogflow_participant_name` instead. The name of the Dialogflow participant. Format: projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}',
    )
    dialogflowParticipantName: Optional[str] = Field(
        None,
        description='The name of the participant provided by Dialogflow. Format: projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}',
    )
    obfuscatedExternalUserId: Optional[str] = Field(
        None, description='Obfuscated user ID from Dialogflow.'
    )
    role: Optional[Role] = Field(None, description='The role of the participant.')
    userId: Optional[str] = Field(
        None, description='A user-specified ID representing the participant.'
    )


class GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentDialogflowSegmentMetadata(
    BaseModel
):
    smartReplyAllowlistCovered: Optional[bool] = Field(
        None,
        description='Whether the transcript segment was covered under the configured smart reply allowlist in Agent Assist.',
    )


class GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentWordInfo(
    BaseModel
):
    confidence: Optional[float] = Field(
        None,
        description='A confidence estimate between 0.0 and 1.0 of the fidelity of this word. A default value of 0.0 indicates that the value is unset.',
    )
    endOffset: Optional[str] = Field(
        None,
        description='Time offset of the end of this word relative to the beginning of the total conversation.',
    )
    startOffset: Optional[str] = Field(
        None,
        description='Time offset of the start of this word relative to the beginning of the total conversation.',
    )
    word: Optional[str] = Field(
        None,
        description='The word itself. Includes punctuation marks that surround the word.',
    )


class GoogleCloudContactcenterinsightsV1CreateAnalysisOperationMetadata(BaseModel):
    annotatorSelector: Optional[GoogleCloudContactcenterinsightsV1AnnotatorSelector] = (
        Field(
            None,
            description='Output only. The annotator selector used for the analysis (if any).',
        )
    )
    conversation: Optional[str] = Field(
        None,
        description='Output only. The Conversation that this Analysis Operation belongs to.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )


class GoogleCloudContactcenterinsightsV1DeleteIssueModelRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Required. The name of the issue model to delete.'
    )


class GoogleCloudContactcenterinsightsV1DeployIssueModelRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Required. The issue model to deploy.'
    )


class GoogleCloudContactcenterinsightsV1DeployIssueModelResponse(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1DialogflowIntent(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The human-readable name of the intent.'
    )


class GoogleCloudContactcenterinsightsV1DialogflowInteractionData(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='The confidence of the match ranging from 0.0 (completely uncertain) to 1.0 (completely certain).',
    )
    dialogflowIntentId: Optional[str] = Field(
        None,
        description='The Dialogflow intent resource path. Format: projects/{project}/agent/{agent}/intents/{intent}',
    )


class GoogleCloudContactcenterinsightsV1DialogflowSource(BaseModel):
    audioUri: Optional[str] = Field(
        None,
        description='Cloud Storage URI that points to a file that contains the conversation audio.',
    )
    dialogflowConversation: Optional[str] = Field(
        None,
        description='Output only. The name of the Dialogflow conversation that this conversation resource is derived from. Format: projects/{project}/locations/{location}/conversations/{conversation}',
    )


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    PERSON = 'PERSON'
    LOCATION = 'LOCATION'
    ORGANIZATION = 'ORGANIZATION'
    EVENT = 'EVENT'
    WORK_OF_ART = 'WORK_OF_ART'
    CONSUMER_GOOD = 'CONSUMER_GOOD'
    OTHER = 'OTHER'
    PHONE_NUMBER = 'PHONE_NUMBER'
    ADDRESS = 'ADDRESS'
    DATE = 'DATE'
    NUMBER = 'NUMBER'
    PRICE = 'PRICE'


class Type1(Enum):
    MENTION_TYPE_UNSPECIFIED = 'MENTION_TYPE_UNSPECIFIED'
    PROPER = 'PROPER'
    COMMON = 'COMMON'


class GoogleCloudContactcenterinsightsV1ExactMatchConfig(BaseModel):
    caseSensitive: Optional[bool] = Field(
        None,
        description='Whether to consider case sensitivity when performing an exact match.',
    )


class WriteDisposition(Enum):
    WRITE_DISPOSITION_UNSPECIFIED = 'WRITE_DISPOSITION_UNSPECIFIED'
    WRITE_TRUNCATE = 'WRITE_TRUNCATE'
    WRITE_APPEND = 'WRITE_APPEND'


class GoogleCloudContactcenterinsightsV1ExportInsightsDataRequestBigQueryDestination(
    BaseModel
):
    dataset: Optional[str] = Field(
        None,
        description='Required. The name of the BigQuery dataset that the snapshot result should be exported to. If this dataset does not exist, the export call returns an INVALID_ARGUMENT error.',
    )
    projectId: Optional[str] = Field(
        None,
        description='A project ID or number. If specified, then export will attempt to write data to this project instead of the resource project. Otherwise, the resource project will be used.',
    )
    table: Optional[str] = Field(
        None,
        description='The BigQuery table name to which the insights data should be written. If this table does not exist, the export call returns an INVALID_ARGUMENT error.',
    )


class GoogleCloudContactcenterinsightsV1ExportInsightsDataResponse(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1FaqAnswerData(BaseModel):
    answer: Optional[str] = Field(
        None, description='The piece of text from the `source` knowledge base document.'
    )
    confidenceScore: Optional[float] = Field(
        None,
        description="The system's confidence score that this answer is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Map that contains metadata about the FAQ answer and the document that it originates from.',
    )
    queryRecord: Optional[str] = Field(
        None,
        description='The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}',
    )
    question: Optional[str] = Field(None, description='The corresponding FAQ question.')
    source: Optional[str] = Field(
        None,
        description='The knowledge document that this answer was extracted from. Format: projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}.',
    )


class GoogleCloudContactcenterinsightsV1GcsSource(BaseModel):
    audioUri: Optional[str] = Field(
        None,
        description='Cloud Storage URI that points to a file that contains the conversation audio.',
    )
    transcriptUri: Optional[str] = Field(
        None,
        description='Immutable. Cloud Storage URI that points to a file that contains the conversation transcript.',
    )


class GoogleCloudContactcenterinsightsV1HoldData(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1IngestConversationsMetadataIngestConversationsStats(
    BaseModel
):
    duplicatesSkippedCount: Optional[int] = Field(
        None,
        description='Output only. The number of objects skipped because another conversation with the same transcript uri had already been ingested.',
    )
    failedIngestCount: Optional[int] = Field(
        None,
        description='Output only. The number of objects which were unable to be ingested due to errors. The errors are populated in the partial_errors field.',
    )
    processedObjectCount: Optional[int] = Field(
        None,
        description='Output only. The number of objects processed during the ingest operation.',
    )
    successfulIngestCount: Optional[int] = Field(
        None,
        description='Output only. The number of new conversations added during this ingest operation.',
    )


class GoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig(
    BaseModel
):
    agentId: Optional[str] = Field(
        None,
        description='An opaque, user-specified string representing the human agent who handled the conversations.',
    )


class GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource(BaseModel):
    bucketUri: Optional[str] = Field(
        None,
        description='Required. The Cloud Storage bucket containing source objects.',
    )


class GoogleCloudContactcenterinsightsV1IngestConversationsRequestTranscriptObjectConfig(
    BaseModel
):
    medium: Optional[Medium] = Field(
        None, description='Required. The medium transcript objects represent.'
    )


class GoogleCloudContactcenterinsightsV1IngestConversationsResponse(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1Intent(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The human-readable name of the intent.'
    )
    id: Optional[str] = Field(None, description='The unique identifier of the intent.')


class GoogleCloudContactcenterinsightsV1IntentMatchData(BaseModel):
    intentUniqueId: Optional[str] = Field(
        None,
        description='The id of the matched intent. Can be used to retrieve the corresponding intent information.',
    )


class GoogleCloudContactcenterinsightsV1InterruptionData(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1Issue(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which this issue was created.'
    )
    displayName: Optional[str] = Field(
        None, description='The representative name for the issue.'
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the issue. Format: projects/{project}/locations/{location}/issueModels/{issue_model}/issues/{issue}',
    )
    sampleUtterances: Optional[List[str]] = Field(
        None,
        description='Output only. Resource names of the sample representative utterances that match to this issue.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time that this issue was updated.',
    )


class GoogleCloudContactcenterinsightsV1IssueAssignment(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Immutable. Display name of the assigned issue. This field is set at time of analyis and immutable since then.',
    )
    issue: Optional[str] = Field(
        None, description='Resource name of the assigned issue.'
    )
    score: Optional[float] = Field(
        None,
        description='Score indicating the likelihood of the issue assignment. currently bounded on [0,1].',
    )


class GoogleCloudContactcenterinsightsV1IssueMatchData(BaseModel):
    issueAssignment: Optional[GoogleCloudContactcenterinsightsV1IssueAssignment] = (
        Field(None, description="Information about the issue's assignment.")
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    UNDEPLOYED = 'UNDEPLOYED'
    DEPLOYING = 'DEPLOYING'
    DEPLOYED = 'DEPLOYED'
    UNDEPLOYING = 'UNDEPLOYING'
    DELETING = 'DELETING'


class GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig(BaseModel):
    filter: Optional[str] = Field(
        None,
        description='A filter to reduce the conversations used for training the model to a specific subset.',
    )
    medium: Optional[Medium] = Field(
        None,
        description='Medium of conversations used in training data. This field is being deprecated. To specify the medium to be used in training a new issue model, set the `medium` field on `filter`.',
    )
    trainingConversationsCount: Optional[str] = Field(
        None,
        description='Output only. Number of conversations used in training. Output only.',
    )


class GoogleCloudContactcenterinsightsV1IssueModelLabelStatsIssueStats(BaseModel):
    displayName: Optional[str] = Field(None, description='Display name of the issue.')
    issue: Optional[str] = Field(
        None,
        description='Issue resource. Format: projects/{project}/locations/{location}/issueModels/{issue_model}/issues/{issue}',
    )
    labeledConversationsCount: Optional[str] = Field(
        None,
        description='Number of conversations attached to the issue at this point in time.',
    )


class GoogleCloudContactcenterinsightsV1IssueModelResult(BaseModel):
    issueModel: Optional[str] = Field(
        None,
        description='Issue model that generates the result. Format: projects/{project}/locations/{location}/issueModels/{issue_model}',
    )
    issues: Optional[List[GoogleCloudContactcenterinsightsV1IssueAssignment]] = Field(
        None, description='All the matched issues.'
    )


class GoogleCloudContactcenterinsightsV1ListIssuesResponse(BaseModel):
    issues: Optional[List[GoogleCloudContactcenterinsightsV1Issue]] = Field(
        None, description='The issues that match the request.'
    )


class GoogleCloudContactcenterinsightsV1PhraseMatchData(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The human-readable name of the phrase matcher.'
    )
    phraseMatcher: Optional[str] = Field(
        None,
        description='The unique identifier (the resource name) of the phrase matcher.',
    )


class GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig(BaseModel):
    exactMatchConfig: Optional[GoogleCloudContactcenterinsightsV1ExactMatchConfig] = (
        Field(None, description='The configuration for the exact match rule.')
    )


class Type2(Enum):
    PHRASE_MATCH_RULE_GROUP_TYPE_UNSPECIFIED = (
        'PHRASE_MATCH_RULE_GROUP_TYPE_UNSPECIFIED'
    )
    ALL_OF = 'ALL_OF'
    ANY_OF = 'ANY_OF'


class RoleMatch(Enum):
    ROLE_UNSPECIFIED = 'ROLE_UNSPECIFIED'
    HUMAN_AGENT = 'HUMAN_AGENT'
    AUTOMATED_AGENT = 'AUTOMATED_AGENT'
    END_USER = 'END_USER'
    ANY_AGENT = 'ANY_AGENT'


class Type3(Enum):
    PHRASE_MATCHER_TYPE_UNSPECIFIED = 'PHRASE_MATCHER_TYPE_UNSPECIFIED'
    ALL_OF = 'ALL_OF'
    ANY_OF = 'ANY_OF'


class GoogleCloudContactcenterinsightsV1RedactionConfig(BaseModel):
    deidentifyTemplate: Optional[str] = Field(
        None,
        description='The fully-qualified DLP deidentify template resource name. Format: `projects/{project}/deidentifyTemplates/{template}`',
    )
    inspectTemplate: Optional[str] = Field(
        None,
        description='The fully-qualified DLP inspect template resource name. Format: `projects/{project}/inspectTemplates/{template}`',
    )


class GoogleCloudContactcenterinsightsV1SentimentData(BaseModel):
    magnitude: Optional[float] = Field(
        None,
        description='A non-negative number from 0 to infinity which represents the abolute magnitude of sentiment regardless of score.',
    )
    score: Optional[float] = Field(
        None,
        description='The sentiment score between -1.0 (negative) and 1.0 (positive).',
    )


class GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig(BaseModel):
    annotatorSelector: Optional[GoogleCloudContactcenterinsightsV1AnnotatorSelector] = (
        Field(
            None,
            description='To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.',
        )
    )
    runtimeIntegrationAnalysisPercentage: Optional[float] = Field(
        None,
        description='Percentage of conversations created using Dialogflow runtime integration to analyze automatically, between [0, 100].',
    )
    uploadConversationAnalysisPercentage: Optional[float] = Field(
        None,
        description='Percentage of conversations created using the UploadConversation endpoint to analyze automatically, between [0, 100].',
    )


class GoogleCloudContactcenterinsightsV1SilenceData(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1SmartComposeSuggestionData(BaseModel):
    confidenceScore: Optional[float] = Field(
        None,
        description="The system's confidence score that this suggestion is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Map that contains metadata about the Smart Compose suggestion and the document from which it originates.',
    )
    queryRecord: Optional[str] = Field(
        None,
        description='The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}',
    )
    suggestion: Optional[str] = Field(
        None, description='The content of the suggestion.'
    )


class GoogleCloudContactcenterinsightsV1SmartReplyData(BaseModel):
    confidenceScore: Optional[float] = Field(
        None,
        description="The system's confidence score that this reply is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Map that contains metadata about the Smart Reply and the document from which it originates.',
    )
    queryRecord: Optional[str] = Field(
        None,
        description='The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}',
    )
    reply: Optional[str] = Field(None, description='The content of the reply.')


class GoogleCloudContactcenterinsightsV1UndeployIssueModelRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Required. The issue model to undeploy.'
    )


class GoogleCloudContactcenterinsightsV1UndeployIssueModelResponse(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1View(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which this view was created.'
    )
    displayName: Optional[str] = Field(
        None, description='The human-readable display name of the view.'
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the view. Format: projects/{project}/locations/{location}/views/{view}',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time at which the view was updated.',
    )
    value: Optional[str] = Field(
        None, description='String with specific view properties, must be non-empty.'
    )


class GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary(BaseModel):
    transcriptIndex: Optional[int] = Field(
        None,
        description='The index in the sequence of transcribed pieces of the conversation where the boundary is located. This index starts at zero.',
    )
    wordIndex: Optional[int] = Field(
        None,
        description='The word index of this boundary with respect to the first word in the transcript piece. This index starts at zero.',
    )


class GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector(BaseModel):
    issueModels: Optional[List[str]] = Field(
        None,
        description='The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.',
    )
    phraseMatchers: Optional[List[str]] = Field(
        None,
        description='The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}',
    )
    runEntityAnnotator: Optional[bool] = Field(
        None, description='Whether to run the entity annotator.'
    )
    runIntentAnnotator: Optional[bool] = Field(
        None, description='Whether to run the intent annotator.'
    )
    runInterruptionAnnotator: Optional[bool] = Field(
        None, description='Whether to run the interruption annotator.'
    )
    runIssueModelAnnotator: Optional[bool] = Field(
        None,
        description='Whether to run the issue model annotator. A model should have already been deployed for this to take effect.',
    )
    runPhraseMatcherAnnotator: Optional[bool] = Field(
        None, description='Whether to run the active phrase matcher annotator(s).'
    )
    runSentimentAnnotator: Optional[bool] = Field(
        None, description='Whether to run the sentiment annotator.'
    )
    runSilenceAnnotator: Optional[bool] = Field(
        None, description='Whether to run the silence annotator.'
    )


class GoogleCloudContactcenterinsightsV1alpha1AnswerFeedback(BaseModel):
    clicked: Optional[bool] = Field(
        None,
        description='Indicates whether an answer or item was clicked by the human agent.',
    )
    correctnessLevel: Optional[CorrectnessLevel] = Field(
        None, description='The correctness level of an answer.'
    )
    displayed: Optional[bool] = Field(
        None,
        description='Indicates whether an answer or item was displayed to the human agent in the agent desktop UI.',
    )


class GoogleCloudContactcenterinsightsV1alpha1ArticleSuggestionData(BaseModel):
    confidenceScore: Optional[float] = Field(
        None,
        description="The system's confidence score that this article is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Map that contains metadata about the Article Suggestion and the document that it originates from.',
    )
    queryRecord: Optional[str] = Field(
        None,
        description='The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}',
    )
    source: Optional[str] = Field(
        None,
        description='The knowledge document that this answer was extracted from. Format: projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}',
    )
    title: Optional[str] = Field(None, description='Article title.')
    uri: Optional[str] = Field(None, description='Article URI.')


class GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest(
    BaseModel
):
    analysisPercentage: Optional[float] = Field(
        None,
        description='Required. Percentage of selected conversation to analyze, between [0, 100].',
    )
    annotatorSelector: Optional[
        GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
    ] = Field(
        None,
        description='To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.',
    )
    filter: Optional[str] = Field(
        None,
        description='Required. Filter used to select the subset of conversations to analyze.',
    )
    parent: Optional[str] = Field(
        None, description='Required. The parent resource to create analyses in.'
    )


class GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsResponse(
    BaseModel
):
    failedAnalysisCount: Optional[int] = Field(
        None, description='Count of failed analyses.'
    )
    successfulAnalysisCount: Optional[int] = Field(
        None, description='Count of successful analyses.'
    )


class GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata(BaseModel):
    agentChannel: Optional[int] = Field(
        None, description='The audio channel that contains the agent.'
    )
    customerChannel: Optional[int] = Field(
        None, description='The audio channel that contains the customer.'
    )


class GoogleCloudContactcenterinsightsV1alpha1ConversationParticipant(BaseModel):
    dialogflowParticipant: Optional[str] = Field(
        None,
        description='Deprecated. Use `dialogflow_participant_name` instead. The name of the Dialogflow participant. Format: projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}',
    )
    dialogflowParticipantName: Optional[str] = Field(
        None,
        description='The name of the participant provided by Dialogflow. Format: projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}',
    )
    obfuscatedExternalUserId: Optional[str] = Field(
        None, description='Obfuscated user ID from Dialogflow.'
    )
    role: Optional[Role] = Field(None, description='The role of the participant.')
    userId: Optional[str] = Field(
        None, description='A user-specified ID representing the participant.'
    )


class GoogleCloudContactcenterinsightsV1alpha1ConversationTranscriptTranscriptSegmentDialogflowSegmentMetadata(
    BaseModel
):
    smartReplyAllowlistCovered: Optional[bool] = Field(
        None,
        description='Whether the transcript segment was covered under the configured smart reply allowlist in Agent Assist.',
    )


class GoogleCloudContactcenterinsightsV1alpha1ConversationTranscriptTranscriptSegmentWordInfo(
    BaseModel
):
    confidence: Optional[float] = Field(
        None,
        description='A confidence estimate between 0.0 and 1.0 of the fidelity of this word. A default value of 0.0 indicates that the value is unset.',
    )
    endOffset: Optional[str] = Field(
        None,
        description='Time offset of the end of this word relative to the beginning of the total conversation.',
    )
    startOffset: Optional[str] = Field(
        None,
        description='Time offset of the start of this word relative to the beginning of the total conversation.',
    )
    word: Optional[str] = Field(
        None,
        description='The word itself. Includes punctuation marks that surround the word.',
    )


class GoogleCloudContactcenterinsightsV1alpha1CreateAnalysisOperationMetadata(
    BaseModel
):
    annotatorSelector: Optional[
        GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
    ] = Field(
        None,
        description='Output only. The annotator selector used for the analysis (if any).',
    )
    conversation: Optional[str] = Field(
        None,
        description='Output only. The Conversation that this Analysis Operation belongs to.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )


class GoogleCloudContactcenterinsightsV1alpha1DeleteIssueModelRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Required. The name of the issue model to delete.'
    )


class GoogleCloudContactcenterinsightsV1alpha1DeployIssueModelRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Required. The issue model to deploy.'
    )


class GoogleCloudContactcenterinsightsV1alpha1DeployIssueModelResponse(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The human-readable name of the intent.'
    )


class GoogleCloudContactcenterinsightsV1alpha1DialogflowInteractionData(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='The confidence of the match ranging from 0.0 (completely uncertain) to 1.0 (completely certain).',
    )
    dialogflowIntentId: Optional[str] = Field(
        None,
        description='The Dialogflow intent resource path. Format: projects/{project}/agent/{agent}/intents/{intent}',
    )


class GoogleCloudContactcenterinsightsV1alpha1DialogflowSource(BaseModel):
    audioUri: Optional[str] = Field(
        None,
        description='Cloud Storage URI that points to a file that contains the conversation audio.',
    )
    dialogflowConversation: Optional[str] = Field(
        None,
        description='Output only. The name of the Dialogflow conversation that this conversation resource is derived from. Format: projects/{project}/locations/{location}/conversations/{conversation}',
    )


class Type4(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    PERSON = 'PERSON'
    LOCATION = 'LOCATION'
    ORGANIZATION = 'ORGANIZATION'
    EVENT = 'EVENT'
    WORK_OF_ART = 'WORK_OF_ART'
    CONSUMER_GOOD = 'CONSUMER_GOOD'
    OTHER = 'OTHER'
    PHONE_NUMBER = 'PHONE_NUMBER'
    ADDRESS = 'ADDRESS'
    DATE = 'DATE'
    NUMBER = 'NUMBER'
    PRICE = 'PRICE'


class Type5(Enum):
    MENTION_TYPE_UNSPECIFIED = 'MENTION_TYPE_UNSPECIFIED'
    PROPER = 'PROPER'
    COMMON = 'COMMON'


class GoogleCloudContactcenterinsightsV1alpha1ExportInsightsDataRequestBigQueryDestination(
    BaseModel
):
    dataset: Optional[str] = Field(
        None,
        description='Required. The name of the BigQuery dataset that the snapshot result should be exported to. If this dataset does not exist, the export call returns an INVALID_ARGUMENT error.',
    )
    projectId: Optional[str] = Field(
        None,
        description='A project ID or number. If specified, then export will attempt to write data to this project instead of the resource project. Otherwise, the resource project will be used.',
    )
    table: Optional[str] = Field(
        None,
        description='The BigQuery table name to which the insights data should be written. If this table does not exist, the export call returns an INVALID_ARGUMENT error.',
    )


class GoogleCloudContactcenterinsightsV1alpha1ExportInsightsDataResponse(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1alpha1FaqAnswerData(BaseModel):
    answer: Optional[str] = Field(
        None, description='The piece of text from the `source` knowledge base document.'
    )
    confidenceScore: Optional[float] = Field(
        None,
        description="The system's confidence score that this answer is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Map that contains metadata about the FAQ answer and the document that it originates from.',
    )
    queryRecord: Optional[str] = Field(
        None,
        description='The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}',
    )
    question: Optional[str] = Field(None, description='The corresponding FAQ question.')
    source: Optional[str] = Field(
        None,
        description='The knowledge document that this answer was extracted from. Format: projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}.',
    )


class GoogleCloudContactcenterinsightsV1alpha1GcsSource(BaseModel):
    audioUri: Optional[str] = Field(
        None,
        description='Cloud Storage URI that points to a file that contains the conversation audio.',
    )
    transcriptUri: Optional[str] = Field(
        None,
        description='Immutable. Cloud Storage URI that points to a file that contains the conversation transcript.',
    )


class GoogleCloudContactcenterinsightsV1alpha1HoldData(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats(
    BaseModel
):
    duplicatesSkippedCount: Optional[int] = Field(
        None,
        description='Output only. The number of objects skipped because another conversation with the same transcript uri had already been ingested.',
    )
    failedIngestCount: Optional[int] = Field(
        None,
        description='Output only. The number of objects which were unable to be ingested due to errors. The errors are populated in the partial_errors field.',
    )
    processedObjectCount: Optional[int] = Field(
        None,
        description='Output only. The number of objects processed during the ingest operation.',
    )
    successfulIngestCount: Optional[int] = Field(
        None,
        description='Output only. The number of new conversations added during this ingest operation.',
    )


class GoogleCloudContactcenterinsightsV1alpha1IngestConversationsRequestConversationConfig(
    BaseModel
):
    agentId: Optional[str] = Field(
        None,
        description='An opaque, user-specified string representing the human agent who handled the conversations.',
    )


class GoogleCloudContactcenterinsightsV1alpha1IngestConversationsRequestGcsSource(
    BaseModel
):
    bucketUri: Optional[str] = Field(
        None,
        description='Required. The Cloud Storage bucket containing source objects.',
    )


class GoogleCloudContactcenterinsightsV1alpha1IngestConversationsRequestTranscriptObjectConfig(
    BaseModel
):
    medium: Optional[Medium] = Field(
        None, description='Required. The medium transcript objects represent.'
    )


class GoogleCloudContactcenterinsightsV1alpha1IngestConversationsResponse(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1alpha1Intent(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The human-readable name of the intent.'
    )
    id: Optional[str] = Field(None, description='The unique identifier of the intent.')


class GoogleCloudContactcenterinsightsV1alpha1IntentMatchData(BaseModel):
    intentUniqueId: Optional[str] = Field(
        None,
        description='The id of the matched intent. Can be used to retrieve the corresponding intent information.',
    )


class GoogleCloudContactcenterinsightsV1alpha1InterruptionData(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1alpha1IssueAssignment(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Immutable. Display name of the assigned issue. This field is set at time of analyis and immutable since then.',
    )
    issue: Optional[str] = Field(
        None, description='Resource name of the assigned issue.'
    )
    score: Optional[float] = Field(
        None,
        description='Score indicating the likelihood of the issue assignment. currently bounded on [0,1].',
    )


class GoogleCloudContactcenterinsightsV1alpha1IssueMatchData(BaseModel):
    issueAssignment: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IssueAssignment
    ] = Field(None, description="Information about the issue's assignment.")


class GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig(BaseModel):
    filter: Optional[str] = Field(
        None,
        description='A filter to reduce the conversations used for training the model to a specific subset.',
    )
    medium: Optional[Medium] = Field(
        None,
        description='Medium of conversations used in training data. This field is being deprecated. To specify the medium to be used in training a new issue model, set the `medium` field on `filter`.',
    )
    trainingConversationsCount: Optional[str] = Field(
        None,
        description='Output only. Number of conversations used in training. Output only.',
    )


class GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStatsIssueStats(BaseModel):
    displayName: Optional[str] = Field(None, description='Display name of the issue.')
    issue: Optional[str] = Field(
        None,
        description='Issue resource. Format: projects/{project}/locations/{location}/issueModels/{issue_model}/issues/{issue}',
    )
    labeledConversationsCount: Optional[str] = Field(
        None,
        description='Number of conversations attached to the issue at this point in time.',
    )


class GoogleCloudContactcenterinsightsV1alpha1IssueModelResult(BaseModel):
    issueModel: Optional[str] = Field(
        None,
        description='Issue model that generates the result. Format: projects/{project}/locations/{location}/issueModels/{issue_model}',
    )
    issues: Optional[List[GoogleCloudContactcenterinsightsV1alpha1IssueAssignment]] = (
        Field(None, description='All the matched issues.')
    )


class GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The human-readable name of the phrase matcher.'
    )
    phraseMatcher: Optional[str] = Field(
        None,
        description='The unique identifier (the resource name) of the phrase matcher.',
    )


class GoogleCloudContactcenterinsightsV1alpha1RedactionConfig(BaseModel):
    deidentifyTemplate: Optional[str] = Field(
        None,
        description='The fully-qualified DLP deidentify template resource name. Format: `projects/{project}/deidentifyTemplates/{template}`',
    )
    inspectTemplate: Optional[str] = Field(
        None,
        description='The fully-qualified DLP inspect template resource name. Format: `projects/{project}/inspectTemplates/{template}`',
    )


class GoogleCloudContactcenterinsightsV1alpha1SentimentData(BaseModel):
    magnitude: Optional[float] = Field(
        None,
        description='A non-negative number from 0 to infinity which represents the abolute magnitude of sentiment regardless of score.',
    )
    score: Optional[float] = Field(
        None,
        description='The sentiment score between -1.0 (negative) and 1.0 (positive).',
    )


class GoogleCloudContactcenterinsightsV1alpha1SilenceData(BaseModel):
    pass


class GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData(BaseModel):
    confidenceScore: Optional[float] = Field(
        None,
        description="The system's confidence score that this suggestion is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Map that contains metadata about the Smart Compose suggestion and the document from which it originates.',
    )
    queryRecord: Optional[str] = Field(
        None,
        description='The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}',
    )
    suggestion: Optional[str] = Field(
        None, description='The content of the suggestion.'
    )


class GoogleCloudContactcenterinsightsV1alpha1SmartReplyData(BaseModel):
    confidenceScore: Optional[float] = Field(
        None,
        description="The system's confidence score that this reply is a good match for this conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Map that contains metadata about the Smart Reply and the document from which it originates.',
    )
    queryRecord: Optional[str] = Field(
        None,
        description='The name of the answer record. Format: projects/{project}/locations/{location}/answerRecords/{answer_record}',
    )
    reply: Optional[str] = Field(None, description='The content of the reply.')


class GoogleCloudContactcenterinsightsV1alpha1UndeployIssueModelRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Required. The issue model to undeploy.'
    )


class GoogleCloudContactcenterinsightsV1alpha1UndeployIssueModelResponse(BaseModel):
    pass


class GoogleProtobufEmpty(BaseModel):
    pass


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class View(Enum):
    CONVERSATION_VIEW_UNSPECIFIED = 'CONVERSATION_VIEW_UNSPECIFIED'
    FULL = 'FULL'
    BASIC = 'BASIC'


class GoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsMetadata(BaseModel):
    completedAnalysesCount: Optional[int] = Field(
        None,
        description='The number of requested analyses that have completed successfully so far.',
    )
    createTime: Optional[str] = Field(
        None, description='The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='The time the operation finished running.'
    )
    failedAnalysesCount: Optional[int] = Field(
        None, description='The number of requested analyses that have failed so far.'
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest
    ] = Field(None, description='The original request for bulk analyze.')
    totalRequestedAnalysesCount: Optional[int] = Field(
        None,
        description='Total number of analyses requested. Computed by the number of conversations returned by `filter` multiplied by `analysis_percentage` in the request.',
    )


class GoogleCloudContactcenterinsightsV1CalculateStatsResponseTimeSeries(BaseModel):
    intervalDuration: Optional[str] = Field(
        None, description='The duration of each interval.'
    )
    points: Optional[
        List[GoogleCloudContactcenterinsightsV1CalculateStatsResponseTimeSeriesInterval]
    ] = Field(
        None,
        description='An ordered list of intervals from earliest to latest, where each interval represents the number of conversations that transpired during the time window.',
    )


class GoogleCloudContactcenterinsightsV1ConversationDataSource(BaseModel):
    dialogflowSource: Optional[GoogleCloudContactcenterinsightsV1DialogflowSource] = (
        Field(
            None, description='The source when the conversation comes from Dialogflow.'
        )
    )
    gcsSource: Optional[GoogleCloudContactcenterinsightsV1GcsSource] = Field(
        None,
        description='A Cloud Storage location specification for the audio and transcript.',
    )


class GoogleCloudContactcenterinsightsV1ConversationLevelSentiment(BaseModel):
    channelTag: Optional[int] = Field(
        None, description='The channel of the audio that the data applies to.'
    )
    sentimentData: Optional[GoogleCloudContactcenterinsightsV1SentimentData] = Field(
        None, description='Data specifying sentiment.'
    )


class GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegment(
    BaseModel
):
    channelTag: Optional[int] = Field(
        None,
        description="For conversations derived from multi-channel audio, this is the channel number corresponding to the audio from that channel. For audioChannelCount = N, its output values can range from '1' to 'N'. A channel tag of 0 indicates that the audio is mono.",
    )
    confidence: Optional[float] = Field(
        None,
        description='A confidence estimate between 0.0 and 1.0 of the fidelity of this segment. A default value of 0.0 indicates that the value is unset.',
    )
    dialogflowSegmentMetadata: Optional[
        GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentDialogflowSegmentMetadata
    ] = Field(
        None, description='CCAI metadata relating to the current transcript segment.'
    )
    languageCode: Optional[str] = Field(
        None,
        description='The language code of this segment as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US".',
    )
    messageTime: Optional[str] = Field(
        None, description='The time that the message occurred, if provided.'
    )
    segmentParticipant: Optional[
        GoogleCloudContactcenterinsightsV1ConversationParticipant
    ] = Field(None, description='The participant of this segment.')
    sentiment: Optional[GoogleCloudContactcenterinsightsV1SentimentData] = Field(
        None, description='The sentiment for this transcript segment.'
    )
    text: Optional[str] = Field(None, description='The text of this segment.')
    words: Optional[
        List[
            GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentWordInfo
        ]
    ] = Field(
        None,
        description='A list of the word-specific information for each word in the segment.',
    )


class GoogleCloudContactcenterinsightsV1DeleteIssueModelMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[GoogleCloudContactcenterinsightsV1DeleteIssueModelRequest] = (
        Field(None, description='The original request for deletion.')
    )


class GoogleCloudContactcenterinsightsV1DeployIssueModelMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[GoogleCloudContactcenterinsightsV1DeployIssueModelRequest] = (
        Field(None, description='The original request for deployment.')
    )


class GoogleCloudContactcenterinsightsV1Entity(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The representative name for the entity.'
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.',
    )
    salience: Optional[float] = Field(
        None,
        description='The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient.',
    )
    sentiment: Optional[GoogleCloudContactcenterinsightsV1SentimentData] = Field(
        None,
        description='The aggregate sentiment expressed for this entity in the conversation.',
    )
    type: Optional[Type] = Field(None, description='The entity type.')


class GoogleCloudContactcenterinsightsV1EntityMentionData(BaseModel):
    entityUniqueId: Optional[str] = Field(
        None,
        description='The key of this entity in conversation entities. Can be used to retrieve the exact `Entity` this mention is attached to.',
    )
    sentiment: Optional[GoogleCloudContactcenterinsightsV1SentimentData] = Field(
        None, description='Sentiment expressed for this mention of the entity.'
    )
    type: Optional[Type1] = Field(None, description='The type of the entity mention.')


class GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest(BaseModel):
    bigQueryDestination: Optional[
        GoogleCloudContactcenterinsightsV1ExportInsightsDataRequestBigQueryDestination
    ] = Field(None, description='Specified if sink is a BigQuery table.')
    filter: Optional[str] = Field(
        None,
        description='A filter to reduce results to a specific subset. Useful for exporting conversations with specific properties.',
    )
    kmsKey: Optional[str] = Field(
        None,
        description='A fully qualified KMS key name for BigQuery tables protected by CMEK. Format: projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}',
    )
    parent: Optional[str] = Field(
        None, description='Required. The parent resource to export data from.'
    )
    writeDisposition: Optional[WriteDisposition] = Field(
        None,
        description='Options for what to do if the destination table already exists.',
    )


class GoogleCloudContactcenterinsightsV1IngestConversationsRequest(BaseModel):
    conversationConfig: Optional[
        GoogleCloudContactcenterinsightsV1IngestConversationsRequestConversationConfig
    ] = Field(None, description='Configuration that applies to all conversations.')
    gcsSource: Optional[
        GoogleCloudContactcenterinsightsV1IngestConversationsRequestGcsSource
    ] = Field(None, description='A cloud storage bucket source.')
    parent: Optional[str] = Field(
        None, description='Required. The parent resource for new conversations.'
    )
    transcriptObjectConfig: Optional[
        GoogleCloudContactcenterinsightsV1IngestConversationsRequestTranscriptObjectConfig
    ] = Field(
        None,
        description='Configuration for when `source` contains conversation transcripts.',
    )


class GoogleCloudContactcenterinsightsV1IssueModelLabelStats(BaseModel):
    analyzedConversationsCount: Optional[str] = Field(
        None,
        description='Number of conversations the issue model has analyzed at this point in time.',
    )
    issueStats: Optional[
        Dict[str, GoogleCloudContactcenterinsightsV1IssueModelLabelStatsIssueStats]
    ] = Field(
        None, description="Statistics on each issue. Key is the issue's resource name."
    )
    unclassifiedConversationsCount: Optional[str] = Field(
        None,
        description='Number of analyzed conversations for which no issue was applicable at this point in time.',
    )


class GoogleCloudContactcenterinsightsV1ListViewsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    views: Optional[List[GoogleCloudContactcenterinsightsV1View]] = Field(
        None, description='The views that match the request.'
    )


class GoogleCloudContactcenterinsightsV1PhraseMatchRule(BaseModel):
    config: Optional[GoogleCloudContactcenterinsightsV1PhraseMatchRuleConfig] = Field(
        None,
        description='Provides additional information about the rule that specifies how to apply the rule.',
    )
    negated: Optional[bool] = Field(
        None,
        description='Specifies whether the phrase must be missing from the transcript segment or present in the transcript segment.',
    )
    query: Optional[str] = Field(
        None, description='Required. The phrase to be matched.'
    )


class GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup(BaseModel):
    phraseMatchRules: Optional[
        List[GoogleCloudContactcenterinsightsV1PhraseMatchRule]
    ] = Field(
        None,
        description='A list of phrase match rules that are included in this group.',
    )
    type: Optional[Type2] = Field(
        None, description='Required. The type of this phrase match rule group.'
    )


class GoogleCloudContactcenterinsightsV1PhraseMatcher(BaseModel):
    activationUpdateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time at which the activation status was updated.',
    )
    active: Optional[bool] = Field(
        None, description='Applies the phrase matcher only when it is active.'
    )
    displayName: Optional[str] = Field(
        None, description='The human-readable name of the phrase matcher.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the phrase matcher. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}',
    )
    phraseMatchRuleGroups: Optional[
        List[GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroup]
    ] = Field(
        None,
        description='A list of phase match rule groups that are included in this matcher.',
    )
    revisionCreateTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp of when the revision was created. It is also the create time when a new matcher is added.',
    )
    revisionId: Optional[str] = Field(
        None,
        description='Output only. Immutable. The revision ID of the phrase matcher. A new revision is committed whenever the matcher is changed, except when it is activated or deactivated. A server generated random ID will be used. Example: locations/global/phraseMatchers/my-first-matcher@1234567',
    )
    roleMatch: Optional[RoleMatch] = Field(
        None,
        description='The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.',
    )
    type: Optional[Type3] = Field(
        None, description='Required. The type of this phrase matcher.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time at which the phrase matcher was updated.',
    )
    versionTag: Optional[str] = Field(
        None,
        description='The customized version tag to use for the phrase matcher. If not specified, it will default to `revision_id`.',
    )


class GoogleCloudContactcenterinsightsV1RuntimeAnnotation(BaseModel):
    annotationId: Optional[str] = Field(
        None,
        description='The unique identifier of the annotation. Format: projects/{project}/locations/{location}/conversationDatasets/{dataset}/conversationDataItems/{data_item}/conversationAnnotations/{annotation}',
    )
    answerFeedback: Optional[GoogleCloudContactcenterinsightsV1AnswerFeedback] = Field(
        None,
        description='The feedback that the customer has about the answer in `data`.',
    )
    articleSuggestion: Optional[
        GoogleCloudContactcenterinsightsV1ArticleSuggestionData
    ] = Field(None, description='Agent Assist Article Suggestion data.')
    createTime: Optional[str] = Field(
        None, description='The time at which this annotation was created.'
    )
    dialogflowInteraction: Optional[
        GoogleCloudContactcenterinsightsV1DialogflowInteractionData
    ] = Field(None, description='Dialogflow interaction data.')
    endBoundary: Optional[GoogleCloudContactcenterinsightsV1AnnotationBoundary] = Field(
        None,
        description='The boundary in the conversation where the annotation ends, inclusive.',
    )
    faqAnswer: Optional[GoogleCloudContactcenterinsightsV1FaqAnswerData] = Field(
        None, description='Agent Assist FAQ answer data.'
    )
    smartComposeSuggestion: Optional[
        GoogleCloudContactcenterinsightsV1SmartComposeSuggestionData
    ] = Field(None, description='Agent Assist Smart Compose suggestion data.')
    smartReply: Optional[GoogleCloudContactcenterinsightsV1SmartReplyData] = Field(
        None, description='Agent Assist Smart Reply data.'
    )
    startBoundary: Optional[GoogleCloudContactcenterinsightsV1AnnotationBoundary] = (
        Field(
            None,
            description='The boundary in the conversation where the annotation starts, inclusive.',
        )
    )


class GoogleCloudContactcenterinsightsV1Settings(BaseModel):
    analysisConfig: Optional[
        GoogleCloudContactcenterinsightsV1SettingsAnalysisConfig
    ] = Field(None, description='Default analysis settings.')
    conversationTtl: Optional[str] = Field(
        None,
        description='The default TTL for newly-created conversations. If a conversation has a specified expiration, that value will be used instead. Changing this value will not change the expiration of existing conversations. Conversations with no expire time persist until they are deleted.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which the settings was created.'
    )
    languageCode: Optional[str] = Field(
        None,
        description='A language code to be applied to each transcript segment unless the segment already specifies a language code. Language code defaults to "en-US" if it is neither specified on the segment nor here.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the settings resource. Format: projects/{project}/locations/{location}/settings',
    )
    pubsubNotificationSettings: Optional[Dict[str, str]] = Field(
        None,
        description='A map that maps a notification trigger to a Pub/Sub topic. Each time a specified trigger occurs, Insights will notify the corresponding Pub/Sub topic. Keys are notification triggers. Supported keys are: * "all-triggers": Notify each time any of the supported triggers occurs. * "create-analysis": Notify each time an analysis is created. * "create-conversation": Notify each time a conversation is created. * "export-insights-data": Notify each time an export is complete. * "update-conversation": Notify each time a conversation is updated via UpdateConversation. Values are Pub/Sub topics. The format of each Pub/Sub topic is: projects/{project}/topics/{topic}',
    )
    redactionConfig: Optional[GoogleCloudContactcenterinsightsV1RedactionConfig] = (
        Field(
            None,
            description='Default DLP redaction resources to be applied while ingesting conversations.',
        )
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The time at which the settings were last updated.',
    )


class GoogleCloudContactcenterinsightsV1UndeployIssueModelMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[GoogleCloudContactcenterinsightsV1UndeployIssueModelRequest] = (
        Field(None, description='The original request for undeployment.')
    )


class GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsMetadata(
    BaseModel
):
    completedAnalysesCount: Optional[int] = Field(
        None,
        description='The number of requested analyses that have completed successfully so far.',
    )
    createTime: Optional[str] = Field(
        None, description='The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='The time the operation finished running.'
    )
    failedAnalysesCount: Optional[int] = Field(
        None, description='The number of requested analyses that have failed so far.'
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1alpha1BulkAnalyzeConversationsRequest
    ] = Field(None, description='The original request for bulk analyze.')
    totalRequestedAnalysesCount: Optional[int] = Field(
        None,
        description='Total number of analyses requested. Computed by the number of conversations returned by `filter` multiplied by `analysis_percentage` in the request.',
    )


class GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource(BaseModel):
    dialogflowSource: Optional[
        GoogleCloudContactcenterinsightsV1alpha1DialogflowSource
    ] = Field(
        None, description='The source when the conversation comes from Dialogflow.'
    )
    gcsSource: Optional[GoogleCloudContactcenterinsightsV1alpha1GcsSource] = Field(
        None,
        description='A Cloud Storage location specification for the audio and transcript.',
    )


class GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment(BaseModel):
    channelTag: Optional[int] = Field(
        None, description='The channel of the audio that the data applies to.'
    )
    sentimentData: Optional[GoogleCloudContactcenterinsightsV1alpha1SentimentData] = (
        Field(None, description='Data specifying sentiment.')
    )


class GoogleCloudContactcenterinsightsV1alpha1ConversationTranscriptTranscriptSegment(
    BaseModel
):
    channelTag: Optional[int] = Field(
        None,
        description="For conversations derived from multi-channel audio, this is the channel number corresponding to the audio from that channel. For audioChannelCount = N, its output values can range from '1' to 'N'. A channel tag of 0 indicates that the audio is mono.",
    )
    confidence: Optional[float] = Field(
        None,
        description='A confidence estimate between 0.0 and 1.0 of the fidelity of this segment. A default value of 0.0 indicates that the value is unset.',
    )
    dialogflowSegmentMetadata: Optional[
        GoogleCloudContactcenterinsightsV1alpha1ConversationTranscriptTranscriptSegmentDialogflowSegmentMetadata
    ] = Field(
        None, description='CCAI metadata relating to the current transcript segment.'
    )
    languageCode: Optional[str] = Field(
        None,
        description='The language code of this segment as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US".',
    )
    messageTime: Optional[str] = Field(
        None, description='The time that the message occurred, if provided.'
    )
    segmentParticipant: Optional[
        GoogleCloudContactcenterinsightsV1alpha1ConversationParticipant
    ] = Field(None, description='The participant of this segment.')
    sentiment: Optional[GoogleCloudContactcenterinsightsV1alpha1SentimentData] = Field(
        None, description='The sentiment for this transcript segment.'
    )
    text: Optional[str] = Field(None, description='The text of this segment.')
    words: Optional[
        List[
            GoogleCloudContactcenterinsightsV1alpha1ConversationTranscriptTranscriptSegmentWordInfo
        ]
    ] = Field(
        None,
        description='A list of the word-specific information for each word in the segment.',
    )


class GoogleCloudContactcenterinsightsV1alpha1DeleteIssueModelMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1alpha1DeleteIssueModelRequest
    ] = Field(None, description='The original request for deletion.')


class GoogleCloudContactcenterinsightsV1alpha1DeployIssueModelMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1alpha1DeployIssueModelRequest
    ] = Field(None, description='The original request for deployment.')


class GoogleCloudContactcenterinsightsV1alpha1Entity(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The representative name for the entity.'
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.',
    )
    salience: Optional[float] = Field(
        None,
        description='The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient.',
    )
    sentiment: Optional[GoogleCloudContactcenterinsightsV1alpha1SentimentData] = Field(
        None,
        description='The aggregate sentiment expressed for this entity in the conversation.',
    )
    type: Optional[Type4] = Field(None, description='The entity type.')


class GoogleCloudContactcenterinsightsV1alpha1EntityMentionData(BaseModel):
    entityUniqueId: Optional[str] = Field(
        None,
        description='The key of this entity in conversation entities. Can be used to retrieve the exact `Entity` this mention is attached to.',
    )
    sentiment: Optional[GoogleCloudContactcenterinsightsV1alpha1SentimentData] = Field(
        None, description='Sentiment expressed for this mention of the entity.'
    )
    type: Optional[Type5] = Field(None, description='The type of the entity mention.')


class GoogleCloudContactcenterinsightsV1alpha1ExportInsightsDataRequest(BaseModel):
    bigQueryDestination: Optional[
        GoogleCloudContactcenterinsightsV1alpha1ExportInsightsDataRequestBigQueryDestination
    ] = Field(None, description='Specified if sink is a BigQuery table.')
    filter: Optional[str] = Field(
        None,
        description='A filter to reduce results to a specific subset. Useful for exporting conversations with specific properties.',
    )
    kmsKey: Optional[str] = Field(
        None,
        description='A fully qualified KMS key name for BigQuery tables protected by CMEK. Format: projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}',
    )
    parent: Optional[str] = Field(
        None, description='Required. The parent resource to export data from.'
    )
    writeDisposition: Optional[WriteDisposition] = Field(
        None,
        description='Options for what to do if the destination table already exists.',
    )


class GoogleCloudContactcenterinsightsV1alpha1IngestConversationsRequest(BaseModel):
    conversationConfig: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IngestConversationsRequestConversationConfig
    ] = Field(None, description='Configuration that applies to all conversations.')
    gcsSource: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IngestConversationsRequestGcsSource
    ] = Field(None, description='A cloud storage bucket source.')
    parent: Optional[str] = Field(
        None, description='Required. The parent resource for new conversations.'
    )
    transcriptObjectConfig: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IngestConversationsRequestTranscriptObjectConfig
    ] = Field(
        None,
        description='Configuration for when `source` contains conversation transcripts.',
    )


class GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats(BaseModel):
    analyzedConversationsCount: Optional[str] = Field(
        None,
        description='Number of conversations the issue model has analyzed at this point in time.',
    )
    issueStats: Optional[
        Dict[
            str, GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStatsIssueStats
        ]
    ] = Field(
        None, description="Statistics on each issue. Key is the issue's resource name."
    )
    unclassifiedConversationsCount: Optional[str] = Field(
        None,
        description='Number of analyzed conversations for which no issue was applicable at this point in time.',
    )


class GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation(BaseModel):
    annotationId: Optional[str] = Field(
        None,
        description='The unique identifier of the annotation. Format: projects/{project}/locations/{location}/conversationDatasets/{dataset}/conversationDataItems/{data_item}/conversationAnnotations/{annotation}',
    )
    answerFeedback: Optional[GoogleCloudContactcenterinsightsV1alpha1AnswerFeedback] = (
        Field(
            None,
            description='The feedback that the customer has about the answer in `data`.',
        )
    )
    articleSuggestion: Optional[
        GoogleCloudContactcenterinsightsV1alpha1ArticleSuggestionData
    ] = Field(None, description='Agent Assist Article Suggestion data.')
    createTime: Optional[str] = Field(
        None, description='The time at which this annotation was created.'
    )
    dialogflowInteraction: Optional[
        GoogleCloudContactcenterinsightsV1alpha1DialogflowInteractionData
    ] = Field(None, description='Dialogflow interaction data.')
    endBoundary: Optional[
        GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary
    ] = Field(
        None,
        description='The boundary in the conversation where the annotation ends, inclusive.',
    )
    faqAnswer: Optional[GoogleCloudContactcenterinsightsV1alpha1FaqAnswerData] = Field(
        None, description='Agent Assist FAQ answer data.'
    )
    smartComposeSuggestion: Optional[
        GoogleCloudContactcenterinsightsV1alpha1SmartComposeSuggestionData
    ] = Field(None, description='Agent Assist Smart Compose suggestion data.')
    smartReply: Optional[GoogleCloudContactcenterinsightsV1alpha1SmartReplyData] = (
        Field(None, description='Agent Assist Smart Reply data.')
    )
    startBoundary: Optional[
        GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary
    ] = Field(
        None,
        description='The boundary in the conversation where the annotation starts, inclusive.',
    )


class GoogleCloudContactcenterinsightsV1alpha1UndeployIssueModelMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1alpha1UndeployIssueModelRequest
    ] = Field(None, description='The original request for undeployment.')


class GoogleLongrunningOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class GoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse(BaseModel):
    currentStats: Optional[GoogleCloudContactcenterinsightsV1IssueModelLabelStats] = (
        Field(
            None,
            description='The latest label statistics for the queried issue model. Includes results on both training data and data labeled after deployment.',
        )
    )


class GoogleCloudContactcenterinsightsV1CalculateStatsResponse(BaseModel):
    averageDuration: Optional[str] = Field(
        None,
        description='The average duration of all conversations. The average is calculated using only conversations that have a time duration.',
    )
    averageTurnCount: Optional[int] = Field(
        None, description='The average number of turns per conversation.'
    )
    conversationCount: Optional[int] = Field(
        None, description='The total number of conversations.'
    )
    conversationCountTimeSeries: Optional[
        GoogleCloudContactcenterinsightsV1CalculateStatsResponseTimeSeries
    ] = Field(
        None,
        description='A time series representing the count of conversations created over time that match that requested filter criteria.',
    )
    customHighlighterMatches: Optional[Dict[str, int]] = Field(
        None,
        description='A map associating each custom highlighter resource name with its respective number of matches in the set of conversations.',
    )
    issueMatches: Optional[Dict[str, int]] = Field(
        None,
        description='A map associating each issue resource name with its respective number of matches in the set of conversations. Key has the format: `projects//locations//issueModels//issues/` Deprecated, use `issue_matches_stats` field instead.',
    )
    issueMatchesStats: Optional[
        Dict[str, GoogleCloudContactcenterinsightsV1IssueModelLabelStatsIssueStats]
    ] = Field(
        None,
        description='A map associating each issue resource name with its respective number of matches in the set of conversations. Key has the format: `projects//locations//issueModels//issues/`',
    )
    smartHighlighterMatches: Optional[Dict[str, int]] = Field(
        None,
        description='A map associating each smart highlighter display name with its respective number of matches in the set of conversations.',
    )


class GoogleCloudContactcenterinsightsV1CallAnnotation(BaseModel):
    annotationEndBoundary: Optional[
        GoogleCloudContactcenterinsightsV1AnnotationBoundary
    ] = Field(
        None,
        description='The boundary in the conversation where the annotation ends, inclusive.',
    )
    annotationStartBoundary: Optional[
        GoogleCloudContactcenterinsightsV1AnnotationBoundary
    ] = Field(
        None,
        description='The boundary in the conversation where the annotation starts, inclusive.',
    )
    channelTag: Optional[int] = Field(
        None,
        description='The channel of the audio where the annotation occurs. For single-channel audio, this field is not populated.',
    )
    entityMentionData: Optional[GoogleCloudContactcenterinsightsV1EntityMentionData] = (
        Field(None, description='Data specifying an entity mention.')
    )
    holdData: Optional[GoogleCloudContactcenterinsightsV1HoldData] = Field(
        None, description='Data specifying a hold.'
    )
    intentMatchData: Optional[GoogleCloudContactcenterinsightsV1IntentMatchData] = (
        Field(None, description='Data specifying an intent match.')
    )
    interruptionData: Optional[GoogleCloudContactcenterinsightsV1InterruptionData] = (
        Field(None, description='Data specifying an interruption.')
    )
    issueMatchData: Optional[GoogleCloudContactcenterinsightsV1IssueMatchData] = Field(
        None, description='Data specifying an issue match.'
    )
    phraseMatchData: Optional[GoogleCloudContactcenterinsightsV1PhraseMatchData] = (
        Field(None, description='Data specifying a phrase match.')
    )
    sentimentData: Optional[GoogleCloudContactcenterinsightsV1SentimentData] = Field(
        None, description='Data specifying sentiment.'
    )
    silenceData: Optional[GoogleCloudContactcenterinsightsV1SilenceData] = Field(
        None, description='Data specifying silence.'
    )


class GoogleCloudContactcenterinsightsV1ConversationTranscript(BaseModel):
    transcriptSegments: Optional[
        List[GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegment]
    ] = Field(
        None,
        description='A list of sequential transcript segments that comprise the conversation.',
    )


class GoogleCloudContactcenterinsightsV1ExportInsightsDataMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    partialErrors: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Partial errors during export operation that might cause the operation output to be incomplete.',
    )
    request: Optional[GoogleCloudContactcenterinsightsV1ExportInsightsDataRequest] = (
        Field(None, description='The original request for export.')
    )


class GoogleCloudContactcenterinsightsV1IngestConversationsMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    ingestConversationsStats: Optional[
        GoogleCloudContactcenterinsightsV1IngestConversationsMetadataIngestConversationsStats
    ] = Field(
        None, description='Output only. Statistics for IngestConversations operation.'
    )
    partialErrors: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Output only. Partial errors during ingest operation that might cause the operation output to be incomplete.',
    )
    request: Optional[GoogleCloudContactcenterinsightsV1IngestConversationsRequest] = (
        Field(None, description='Output only. The original request for ingest.')
    )


class GoogleCloudContactcenterinsightsV1IssueModel(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which this issue model was created.'
    )
    displayName: Optional[str] = Field(
        None, description='The representative name for the issue model.'
    )
    inputDataConfig: Optional[
        GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig
    ] = Field(
        None,
        description='Configs for the input data that used to create the issue model.',
    )
    issueCount: Optional[str] = Field(
        None, description='Output only. Number of issues in this issue model.'
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}',
    )
    state: Optional[State] = Field(None, description='Output only. State of the model.')
    trainingStats: Optional[GoogleCloudContactcenterinsightsV1IssueModelLabelStats] = (
        Field(
            None,
            description="Output only. Immutable. The issue model's label statistics on its training data.",
        )
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time at which the issue model was updated.',
    )


class GoogleCloudContactcenterinsightsV1ListIssueModelsResponse(BaseModel):
    issueModels: Optional[List[GoogleCloudContactcenterinsightsV1IssueModel]] = Field(
        None, description='The issue models that match the request.'
    )


class GoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    phraseMatchers: Optional[List[GoogleCloudContactcenterinsightsV1PhraseMatcher]] = (
        Field(None, description='The phrase matchers that match the request.')
    )


class GoogleCloudContactcenterinsightsV1alpha1CallAnnotation(BaseModel):
    annotationEndBoundary: Optional[
        GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary
    ] = Field(
        None,
        description='The boundary in the conversation where the annotation ends, inclusive.',
    )
    annotationStartBoundary: Optional[
        GoogleCloudContactcenterinsightsV1alpha1AnnotationBoundary
    ] = Field(
        None,
        description='The boundary in the conversation where the annotation starts, inclusive.',
    )
    channelTag: Optional[int] = Field(
        None,
        description='The channel of the audio where the annotation occurs. For single-channel audio, this field is not populated.',
    )
    entityMentionData: Optional[
        GoogleCloudContactcenterinsightsV1alpha1EntityMentionData
    ] = Field(None, description='Data specifying an entity mention.')
    holdData: Optional[GoogleCloudContactcenterinsightsV1alpha1HoldData] = Field(
        None, description='Data specifying a hold.'
    )
    intentMatchData: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IntentMatchData
    ] = Field(None, description='Data specifying an intent match.')
    interruptionData: Optional[
        GoogleCloudContactcenterinsightsV1alpha1InterruptionData
    ] = Field(None, description='Data specifying an interruption.')
    issueMatchData: Optional[GoogleCloudContactcenterinsightsV1alpha1IssueMatchData] = (
        Field(None, description='Data specifying an issue match.')
    )
    phraseMatchData: Optional[
        GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData
    ] = Field(None, description='Data specifying a phrase match.')
    sentimentData: Optional[GoogleCloudContactcenterinsightsV1alpha1SentimentData] = (
        Field(None, description='Data specifying sentiment.')
    )
    silenceData: Optional[GoogleCloudContactcenterinsightsV1alpha1SilenceData] = Field(
        None, description='Data specifying silence.'
    )


class GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript(BaseModel):
    transcriptSegments: Optional[
        List[
            GoogleCloudContactcenterinsightsV1alpha1ConversationTranscriptTranscriptSegment
        ]
    ] = Field(
        None,
        description='A list of sequential transcript segments that comprise the conversation.',
    )


class GoogleCloudContactcenterinsightsV1alpha1ExportInsightsDataMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    partialErrors: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Partial errors during export operation that might cause the operation output to be incomplete.',
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1alpha1ExportInsightsDataRequest
    ] = Field(None, description='The original request for export.')


class GoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    ingestConversationsStats: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IngestConversationsMetadataIngestConversationsStats
    ] = Field(
        None, description='Output only. Statistics for IngestConversations operation.'
    )
    partialErrors: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Output only. Partial errors during ingest operation that might cause the operation output to be incomplete.',
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IngestConversationsRequest
    ] = Field(None, description='Output only. The original request for ingest.')


class GoogleCloudContactcenterinsightsV1alpha1IssueModel(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which this issue model was created.'
    )
    displayName: Optional[str] = Field(
        None, description='The representative name for the issue model.'
    )
    inputDataConfig: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IssueModelInputDataConfig
    ] = Field(
        None,
        description='Configs for the input data that used to create the issue model.',
    )
    issueCount: Optional[str] = Field(
        None, description='Output only. Number of issues in this issue model.'
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}',
    )
    state: Optional[State] = Field(None, description='Output only. State of the model.')
    trainingStats: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IssueModelLabelStats
    ] = Field(
        None,
        description="Output only. Immutable. The issue model's label statistics on its training data.",
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time at which the issue model was updated.',
    )


class GoogleLongrunningListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[GoogleLongrunningOperation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadata(BaseModel):
    annotations: Optional[List[GoogleCloudContactcenterinsightsV1CallAnnotation]] = (
        Field(None, description='A list of call annotations that apply to this call.')
    )
    entities: Optional[Dict[str, GoogleCloudContactcenterinsightsV1Entity]] = Field(
        None, description='All the entities in the call.'
    )
    intents: Optional[Dict[str, GoogleCloudContactcenterinsightsV1Intent]] = Field(
        None, description='All the matched intents in the call.'
    )
    issueModelResult: Optional[GoogleCloudContactcenterinsightsV1IssueModelResult] = (
        Field(None, description='Overall conversation-level issue modeling result.')
    )
    phraseMatchers: Optional[
        Dict[str, GoogleCloudContactcenterinsightsV1PhraseMatchData]
    ] = Field(None, description='All the matched phrase matchers in the call.')
    sentiments: Optional[
        List[GoogleCloudContactcenterinsightsV1ConversationLevelSentiment]
    ] = Field(
        None,
        description='Overall conversation-level sentiment for each channel of the call.',
    )


class GoogleCloudContactcenterinsightsV1CreateIssueModelRequest(BaseModel):
    issueModel: Optional[GoogleCloudContactcenterinsightsV1IssueModel] = Field(
        None, description='Required. The issue model to create.'
    )
    parent: Optional[str] = Field(
        None, description='Required. The parent resource of the issue model.'
    )


class GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata(
    BaseModel
):
    annotations: Optional[
        List[GoogleCloudContactcenterinsightsV1alpha1CallAnnotation]
    ] = Field(None, description='A list of call annotations that apply to this call.')
    entities: Optional[Dict[str, GoogleCloudContactcenterinsightsV1alpha1Entity]] = (
        Field(None, description='All the entities in the call.')
    )
    intents: Optional[Dict[str, GoogleCloudContactcenterinsightsV1alpha1Intent]] = (
        Field(None, description='All the matched intents in the call.')
    )
    issueModelResult: Optional[
        GoogleCloudContactcenterinsightsV1alpha1IssueModelResult
    ] = Field(None, description='Overall conversation-level issue modeling result.')
    phraseMatchers: Optional[
        Dict[str, GoogleCloudContactcenterinsightsV1alpha1PhraseMatchData]
    ] = Field(None, description='All the matched phrase matchers in the call.')
    sentiments: Optional[
        List[GoogleCloudContactcenterinsightsV1alpha1ConversationLevelSentiment]
    ] = Field(
        None,
        description='Overall conversation-level sentiment for each channel of the call.',
    )


class GoogleCloudContactcenterinsightsV1alpha1CreateIssueModelRequest(BaseModel):
    issueModel: Optional[GoogleCloudContactcenterinsightsV1alpha1IssueModel] = Field(
        None, description='Required. The issue model to create.'
    )
    parent: Optional[str] = Field(
        None, description='Required. The parent resource of the issue model.'
    )


class GoogleCloudContactcenterinsightsV1AnalysisResult(BaseModel):
    callAnalysisMetadata: Optional[
        GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadata
    ] = Field(None, description='Call-specific metadata created by the analysis.')
    endTime: Optional[str] = Field(
        None, description='The time at which the analysis ended.'
    )


class GoogleCloudContactcenterinsightsV1CreateIssueModelMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[GoogleCloudContactcenterinsightsV1CreateIssueModelRequest] = (
        Field(None, description='The original request for creation.')
    )


class GoogleCloudContactcenterinsightsV1alpha1AnalysisResult(BaseModel):
    callAnalysisMetadata: Optional[
        GoogleCloudContactcenterinsightsV1alpha1AnalysisResultCallAnalysisMetadata
    ] = Field(None, description='Call-specific metadata created by the analysis.')
    endTime: Optional[str] = Field(
        None, description='The time at which the analysis ended.'
    )


class GoogleCloudContactcenterinsightsV1alpha1CreateIssueModelMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1alpha1CreateIssueModelRequest
    ] = Field(None, description='The original request for creation.')


class GoogleCloudContactcenterinsightsV1Analysis(BaseModel):
    analysisResult: Optional[GoogleCloudContactcenterinsightsV1AnalysisResult] = Field(
        None,
        description='Output only. The result of the analysis, which is populated when the analysis finishes.',
    )
    annotatorSelector: Optional[GoogleCloudContactcenterinsightsV1AnnotatorSelector] = (
        Field(
            None,
            description='To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.',
        )
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time at which the analysis was created, which occurs when the long-running operation completes.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}',
    )
    requestTime: Optional[str] = Field(
        None, description='Output only. The time at which the analysis was requested.'
    )


class GoogleCloudContactcenterinsightsV1Conversation(BaseModel):
    agentId: Optional[str] = Field(
        None,
        description='An opaque, user-specified string representing the human agent who handled the conversation.',
    )
    callMetadata: Optional[
        GoogleCloudContactcenterinsightsV1ConversationCallMetadata
    ] = Field(None, description='Call-specific metadata.')
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which the conversation was created.'
    )
    dataSource: Optional[GoogleCloudContactcenterinsightsV1ConversationDataSource] = (
        Field(
            None,
            description='The source of the audio and transcription for the conversation.',
        )
    )
    dialogflowIntents: Optional[
        Dict[str, GoogleCloudContactcenterinsightsV1DialogflowIntent]
    ] = Field(
        None,
        description='Output only. All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}',
    )
    duration: Optional[str] = Field(
        None, description='Output only. The duration of the conversation.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.',
    )
    languageCode: Optional[str] = Field(
        None, description='A user-specified language code for the conversation.'
    )
    latestAnalysis: Optional[GoogleCloudContactcenterinsightsV1Analysis] = Field(
        None,
        description="Output only. The conversation's latest analysis, if one exists.",
    )
    medium: Optional[Medium] = Field(
        None,
        description='Immutable. The conversation medium, if unspecified will default to PHONE_CALL.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}',
    )
    obfuscatedUserId: Optional[str] = Field(
        None, description='Obfuscated user ID which the customer sent to us.'
    )
    runtimeAnnotations: Optional[
        List[GoogleCloudContactcenterinsightsV1RuntimeAnnotation]
    ] = Field(
        None,
        description='Output only. The annotations that were generated during the customer and agent interaction.',
    )
    startTime: Optional[str] = Field(
        None, description='The time at which the conversation started.'
    )
    transcript: Optional[GoogleCloudContactcenterinsightsV1ConversationTranscript] = (
        Field(None, description='Output only. The conversation transcript.')
    )
    ttl: Optional[str] = Field(
        None,
        description='Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.',
    )
    turnCount: Optional[int] = Field(
        None, description='Output only. The number of turns in the conversation.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time at which the conversation was updated.',
    )


class GoogleCloudContactcenterinsightsV1ListAnalysesResponse(BaseModel):
    analyses: Optional[List[GoogleCloudContactcenterinsightsV1Analysis]] = Field(
        None, description='The analyses that match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class GoogleCloudContactcenterinsightsV1ListConversationsResponse(BaseModel):
    conversations: Optional[List[GoogleCloudContactcenterinsightsV1Conversation]] = (
        Field(None, description='The conversations that match the request.')
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token which can be sent as `page_token` to retrieve the next page. If this field is set, it means there is another page available. If it is not set, it means no other pages are available.',
    )


class GoogleCloudContactcenterinsightsV1UploadConversationRequest(BaseModel):
    conversation: Optional[GoogleCloudContactcenterinsightsV1Conversation] = Field(
        None, description='Required. The conversation resource to create.'
    )
    conversationId: Optional[str] = Field(
        None,
        description="Optional. A unique ID for the new conversation. This ID will become the final component of the conversation's resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`",
    )
    parent: Optional[str] = Field(
        None, description='Required. The parent resource of the conversation.'
    )
    redactionConfig: Optional[GoogleCloudContactcenterinsightsV1RedactionConfig] = (
        Field(
            None,
            description='Optional. DLP settings for transcript redaction. Optional, will default to the config specified in Settings.',
        )
    )


class GoogleCloudContactcenterinsightsV1alpha1Analysis(BaseModel):
    analysisResult: Optional[GoogleCloudContactcenterinsightsV1alpha1AnalysisResult] = (
        Field(
            None,
            description='Output only. The result of the analysis, which is populated when the analysis finishes.',
        )
    )
    annotatorSelector: Optional[
        GoogleCloudContactcenterinsightsV1alpha1AnnotatorSelector
    ] = Field(
        None,
        description='To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time at which the analysis was created, which occurs when the long-running operation completes.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}',
    )
    requestTime: Optional[str] = Field(
        None, description='Output only. The time at which the analysis was requested.'
    )


class GoogleCloudContactcenterinsightsV1alpha1Conversation(BaseModel):
    agentId: Optional[str] = Field(
        None,
        description='An opaque, user-specified string representing the human agent who handled the conversation.',
    )
    callMetadata: Optional[
        GoogleCloudContactcenterinsightsV1alpha1ConversationCallMetadata
    ] = Field(None, description='Call-specific metadata.')
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which the conversation was created.'
    )
    dataSource: Optional[
        GoogleCloudContactcenterinsightsV1alpha1ConversationDataSource
    ] = Field(
        None,
        description='The source of the audio and transcription for the conversation.',
    )
    dialogflowIntents: Optional[
        Dict[str, GoogleCloudContactcenterinsightsV1alpha1DialogflowIntent]
    ] = Field(
        None,
        description='Output only. All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}',
    )
    duration: Optional[str] = Field(
        None, description='Output only. The duration of the conversation.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.',
    )
    languageCode: Optional[str] = Field(
        None, description='A user-specified language code for the conversation.'
    )
    latestAnalysis: Optional[GoogleCloudContactcenterinsightsV1alpha1Analysis] = Field(
        None,
        description="Output only. The conversation's latest analysis, if one exists.",
    )
    medium: Optional[Medium] = Field(
        None,
        description='Immutable. The conversation medium, if unspecified will default to PHONE_CALL.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}',
    )
    obfuscatedUserId: Optional[str] = Field(
        None, description='Obfuscated user ID which the customer sent to us.'
    )
    runtimeAnnotations: Optional[
        List[GoogleCloudContactcenterinsightsV1alpha1RuntimeAnnotation]
    ] = Field(
        None,
        description='Output only. The annotations that were generated during the customer and agent interaction.',
    )
    startTime: Optional[str] = Field(
        None, description='The time at which the conversation started.'
    )
    transcript: Optional[
        GoogleCloudContactcenterinsightsV1alpha1ConversationTranscript
    ] = Field(None, description='Output only. The conversation transcript.')
    ttl: Optional[str] = Field(
        None,
        description='Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.',
    )
    turnCount: Optional[int] = Field(
        None, description='Output only. The number of turns in the conversation.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The most recent time at which the conversation was updated.',
    )


class GoogleCloudContactcenterinsightsV1alpha1UploadConversationRequest(BaseModel):
    conversation: Optional[GoogleCloudContactcenterinsightsV1alpha1Conversation] = (
        Field(None, description='Required. The conversation resource to create.')
    )
    conversationId: Optional[str] = Field(
        None,
        description="Optional. A unique ID for the new conversation. This ID will become the final component of the conversation's resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`",
    )
    parent: Optional[str] = Field(
        None, description='Required. The parent resource of the conversation.'
    )
    redactionConfig: Optional[
        GoogleCloudContactcenterinsightsV1alpha1RedactionConfig
    ] = Field(
        None,
        description='Optional. DLP settings for transcript redaction. Optional, will default to the config specified in Settings.',
    )


class GoogleCloudContactcenterinsightsV1UploadConversationMetadata(BaseModel):
    analysisOperation: Optional[str] = Field(
        None,
        description='Output only. The operation name for a successfully created analysis operation, if any.',
    )
    appliedRedactionConfig: Optional[
        GoogleCloudContactcenterinsightsV1RedactionConfig
    ] = Field(
        None,
        description='Output only. The redaction config applied to the uploaded conversation.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[GoogleCloudContactcenterinsightsV1UploadConversationRequest] = (
        Field(None, description='Output only. The original request.')
    )


class GoogleCloudContactcenterinsightsV1alpha1UploadConversationMetadata(BaseModel):
    analysisOperation: Optional[str] = Field(
        None,
        description='Output only. The operation name for a successfully created analysis operation, if any.',
    )
    appliedRedactionConfig: Optional[
        GoogleCloudContactcenterinsightsV1alpha1RedactionConfig
    ] = Field(
        None,
        description='Output only. The redaction config applied to the uploaded conversation.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    request: Optional[
        GoogleCloudContactcenterinsightsV1alpha1UploadConversationRequest
    ] = Field(None, description='Output only. The original request.')
